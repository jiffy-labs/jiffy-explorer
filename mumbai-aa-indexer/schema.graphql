type Transfer @entity {
  id:ID!
  txHash: Bytes
  type: String
  value: BigInt
  to: Bytes
  from: Bytes
}

type Staking @entity {
  id: ID!
  userOpHash: Bytes
  type: String
  requestFrom: Bytes
  to: Bytes
  value: BigInt
}

type UserOp @entity {
  id: ID!
  transactionHash: Bytes
  userOpHash: Bytes
  sender: Bytes
  paymaster: Bytes
  nonce: BigInt
  actualGasCost: BigInt
  actualGasPrice: BigInt
  actualGasUsed: BigInt
  success: Boolean
  revertReason: Bytes
  blockTime: BigInt
  blockNumber: BigInt
  network: String
  input: Bytes
}

type AccountDeployed @entity(immutable: true) {
  id: Bytes!
  userOpHash: Bytes! # bytes32
  sender: Bytes! # address
  factory: Bytes! # address
  paymaster: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposited @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  totalDeposit: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SignatureAggregatorChanged @entity(immutable: true) {
  id: Bytes!
  aggregator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeLocked @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  totalStaked: BigInt! # uint256
  withdrawTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeUnlocked @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  withdrawTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeWithdrawn @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  withdrawAddress: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdrawn @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  withdrawAddress: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
